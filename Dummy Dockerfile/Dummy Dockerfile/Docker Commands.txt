1. create any app e.g. react,node etc
2. create a dockerfile for development in which we have to include                       Dockerfile.dev  <= format

FROM node:19      			//node-base image
WORKDIR /app      			//work directory
COPY ./package*.json ./  		//copy all package.json files into work	directory
RUN npm install				//run the installed npm scripts
COPY . .				//copy src folders
COPY . /app 		
CMD ["npm","run","start"] 		//command for running app	

3. create a .dockerigonre file , which includes the files we dont want to push.

4. create a build version of project by typing "npm run build"

5. create an image for Dockerfile.dev by typing "docker build -f Dockerfile.dev ." 

---------------------NOTE: we dont need to follow steps 1 to 5 if we are doing only production build we can start from step 6 and 
if we are starting from step 6 then dont name it Dockerfile.prod only name it Dockerfile and follow along with 
all the naming conventions.


6. create a dockerfile for production in which we have to include                       Dockerfile.prod<= format

FROM node:19 as build
WORKDIR /app
COPY ./package*.json ./
RUN npm install
COPY . .
RUN npm run build

FROM nginx 
COPY --from=build /app/build /usr/share/nginx/html 

[this Dockerfile.prod only push the build version to hub it wont upload whole code]

7. create an image for dockerfile.prod by typing "docker build -f Dockerfile.prod -t docker-image-prod ." 

8. now run the build image by creating container with this command "docker run -e WATCHPACK_POLLING=true -d -p 8080:80 --name prod-container docker-image-prod"

9. for pushing the image : create a tag with image by this command "docker tag docker-image-prod lucky7x/docker-image-prod"

10. push command "docker push lucky7x/docker-image-prod" (you need to be logged in to docker hub for performing this action)

11. pull command "docker pull lucky7x/docker-image-prod"



-----General Commands For Docker-----
1. build image

docker build -t {image-name} . <= build image
docker image ls <= list images

2. build container
docker run -d -p 3000:3000 --name {container-name} {image-name} <= container
(without hot reload)

docker run -d -p -e WATCHPACK_POLLING=TRUE -v C:\Users\23011801\Documents\docker-test\dockerreacttest\src:/app/src 3000:3000 --name {container-name} {image-name} 
(with hot reload)


3. extra commands

docker rm {container-name} -f  <= removes container
docker stop {container-name} <= stops container
docker ps <= lists all containers


4. bash commands

docker exec -it {container-name} bash <=we can see the folders
ls <= we can see the whole directory
eg. cd src/ <= go to src directory
cat app.js <= see the code of app.js in terminal


5. push/pull dockerhub

docker image ls
docker login <= login with credentials
docker tag {image-name} {username}/{image-name} <= tag created
docker push {username}/{image-name} <= pushing to dockerhub


docker pull {username}/{image-name} <= pulling from github


*Docker Compose file for including backend , mongo and frontend.
filename should be docker-compose.yml

///

version: '3'  - declare a version , check on site
services:
front:
build:
context: './react-docker'          -where our project is
dockerfile: Dockerfile             -which dockerfile to use
ports:
- 3000:3000                        -ports declaration
container_name: react-container    -name of container
environment:
- WATCHPACK_POLLING=true           -for hot relaoding
networks:
- mern-stack-network             -network name
volumes:
- ./react-docker:/app            -path
depends_on:
- backend                        -depends_on backend
backend:
build:
context: './express-docker'
dockerfile: Dockerfile
ports:
- 5500:5500
container_name: express-container
networks:
- mern-stack-network
volumes:
- ./express-docker:/app
depends_on:
- mongo
mongo:
image: mongo
ports:
- 27017:27017
container_name: mongo-container
networks:
- mern-stack-network
volumes:
- mongoData:/data/db
environment:
- MONGO_INITDB_ROOT_USERNAME=<use .env file instead>
- MONGO_INITDB_ROOT_PASSWORD=<use .env file instead>
- MONGO_INITDB_DATABASE=ecom
networks:
mern-stack-network:
volumes:
mongoData:

///

*node app Dockerfile

FROM node:16
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 8000
CMD ["npm","run","dev"] 

///
frontend and backend on same port dockerfile

# Fetching the latest node image on apline linux
FROM node:alpine AS builder

# Set Git credentials as build arguments
ARG GIT_USERNAME
ARG GIT_PASSWORD

# Install required dependencies
RUN apk update && \
    apk add --update git curl 

# Setting up the work directory
WORKDIR /app

# Clone the Node.js Git repository , for pulling latest update from gitlab --recurse-submodules --depth=1
RUN git clone --recurse-submodules --depth=1 https://gitlab.silvertouch.com/KaranShah/student_management.git .
   
# Declaring env
ENV NODE_ENV production

# To get in folder directory and install dependancies
RUN cd /app/Client && npm install
RUN cd /app/Client &&  npm run build

# create node js image
 FROM builder AS builder-frontend

# Final stage for installing backend dependencies and copying frontend build
FROM node:14-alpine

# env file
ENV NODE_ENV production

# setting the work directory
WORKDIR /app/Server

# copying the files from the build stage image
COPY --from=builder /app /app

# copying build folder to public directory so nodengix can access it
COPY --from=builder /app/Client/build /app/public

# To get in folder directory and install dependancies
RUN cd /app/Server && npm install

# copying configuration file for running frontend and backend and frontend on same port.
COPY NodEnginx.conf /etc/nginx/nginx.conf

# update enginx
RUN apk add --update nginx

# exposing our port
EXPOSE 80

# running our image
CMD ["sh", "-c", "nginx && DEBUG=express:* node index.js"]

/// configuration file for nodenginx filename:- NodEnginx.conf

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx/nginx.pid;

events {
  worker_connections 1024;
}

http {
  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;

  keepalive_timeout 65;

  server {
    listen 80;
    server_name localhost;

    root /app/public;

    index index.html;

    location /api {
      proxy_pass http://localhost:8000;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    location / {
      try_files $uri /index.html;
    }
  }
}



///
for running image which has frontend and backend on same port

docker build --build-arg GIT_USERNAME={gitlab username} --build-arg GIT_PASSWORD={gitlab Password} -f ./{dockerfile name} -t {image-name} .